//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 3.0.5701.25371)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by vh_co at LAPTOP-AI0568T3 on 12/22/2020 15:48:22 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using ONC.RESTful.Entities;

namespace ONC.RESTful.Data
{
    /// <summary>
    /// Historico data access component. Manages CRUD operations for the Historico table.
    /// </summary>
    public partial class HistoricoDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Historico table.
        /// </summary>
        /// <param name="maximumRows">The maximum number of rows to return.</param>
        /// <param name="startRowIndex">The starting row index.</param>
        /// <param name="sortExpression">The sort expression.</param>
        /// <returns>A collection of Historico objects.</returns>		
        public List<Historico> SelectPageSort(int maximumRows, int startRowIndex, string sortExpression)

        {
            const string SQL_STATEMENT =
                "WITH SortedHistorico AS " +
                "(SELECT ROW_NUMBER() OVER (ORDER BY {0}) AS RowNumber, " +
                    "[IdHistorico], [Idint], [Iduniq], [nombre], [comentario], [fecha], [usuario], [nombreusuario]" +
                        ", [estado], [tipo] " +
                    "FROM dbo.Historico " +
                ") SELECT * FROM SortedHistorico " +
                "WHERE RowNumber BETWEEN @StartRowIndex AND @EndRowIndex";

            //startRowIndex++;
            long endRowIndex = startRowIndex + maximumRows;

            List<Historico> result = new List<Historico>();

            // Connect to database.
            var db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(string.Format(SQL_STATEMENT, sortExpression)))
            {               // Paging Parameters.
                db.AddInParameter(cmd, "@StartRowIndex", DbType.Int64, startRowIndex);
                db.AddInParameter(cmd, "@EndRowIndex", DbType.Int64, endRowIndex);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Historico
                        Historico historico = LoadHistorico(dr);

                        // Add to List.
                        result.Add(historico);
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Creates a new Historico from a Datareader.
        /// </summary>
        /// <param name="dr">A DataReader object.</param>
        /// <returns>Returns a Historico.</returns>		
        private Historico LoadHistorico(IDataReader dr)
        {
            // Create a new Historico
            Historico historico = new Historico();

            // Read values.
            historico.IdHistorico = GetDataValue<int>(dr, "IdHistorico");
            historico.Idint = GetDataValue<int>(dr, "Idint");
            historico.Iduniq = GetDataValue<Guid>(dr, "Iduniq");
            historico.nombre = GetDataValue<string>(dr, "nombre");
            historico.comentario = GetDataValue<string>(dr, "comentario");
            historico.fecha = GetDataValue<DateTime>(dr, "fecha");
            historico.usuario = GetDataValue<Guid>(dr, "usuario");
            historico.nombreusuario = GetDataValue<string>(dr, "nombreusuario");
            historico.estado = GetDataValue<bool>(dr, "estado");
            historico.tipo = GetDataValue<int>(dr, "tipo");

            return historico;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Historico table with paging.
        /// </summary>
        /// <param name="currentPage"></param>
        /// <returns></returns>		
        public List<Historico> SelectPage(int currentPage)
        {
            const string SQL_STATEMENT =
                "WITH SortedHistorico AS " +
                "(SELECT ROW_NUMBER() OVER (ORDER BY [IdHistorico]) AS RowNumber, " +
                    "[IdHistorico], [Idint], [Iduniq], [nombre], [comentario], [fecha], [usuario], [nombreusuario]" +
                        ", [estado], [tipo] " +
                    "FROM dbo.Historico " +
                ") SELECT * FROM SortedHistorico " +
                "WHERE RowNumber BETWEEN @StartIndex AND @EndIndex";

            long startIndex = ((currentPage -1)  * base.PageSize);
            long endIndex = startIndex + base.PageSize;

            startIndex += 1;
            List<Historico> result = new List<Historico>();

            // Connect to database.
            var db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Paging parameters.
                db.AddInParameter(cmd, "@StartIndex", DbType.Int64, startIndex);
                db.AddInParameter(cmd, "@EndIndex", DbType.Int64, endIndex);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Historico
                        Historico historico = new Historico();

                        // Read values.
                        historico.IdHistorico = GetDataValue<int>(dr, "IdHistorico");
                        historico.Idint = GetDataValue<int>(dr, "Idint");
                        historico.Iduniq = GetDataValue<Guid>(dr, "Iduniq");
                        historico.nombre = GetDataValue<string>(dr, "nombre");
                        historico.comentario = GetDataValue<string>(dr, "comentario");
                        historico.fecha = GetDataValue<DateTime>(dr, "fecha");
                        historico.usuario = GetDataValue<Guid>(dr, "usuario");
                        historico.nombreusuario = GetDataValue<string>(dr, "nombreusuario");
                        historico.estado = GetDataValue<bool>(dr, "estado");
                        historico.tipo = GetDataValue<int>(dr, "tipo");

                        // Add to List.
                        result.Add(historico);
                    }
                }
            }

            return result;
        }
    }
}

